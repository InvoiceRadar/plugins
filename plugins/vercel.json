{
  "$schema": "https://raw.githubusercontent.com/invoiceradar/plugins/main/schema.json",
  "id": "vercel.com",
  "homepage": "https://vercel.com",
  "name": "Vercel",
  "description": "Vercel is a cloud platform for static sites and Serverless Functions.",
  "configSchema": {
    "teamId": {
      "type": "string",
      "title": "Team ID",
      "example": "team_12345",
      "description": "Your Vercel Team ID",
      "required": true
    }
  },
  "checkAuth": [
    {
      "action": "navigate",
      "url": "https://vercel.com/home"
    },
    {
      "action": "waitForElement",
      "selector": "[data-testid]"
    },
    {
      "action": "checkElementExists",
      "selector": "[data-testid='avatar-popover/trigger']"
    }
  ],
  "startAuth": [
    {
      "action": "navigate",
      "url": "https://vercel.com/login"
    },
    {
      "action": "waitForElement",
      "selector": "[data-testid='avatar-popover/trigger']",
      "timeout": 180000
    }
  ],
  "getConfigOptions": [
    {
      "action": "navigate",
      "url": "https://vercel.com/"
    },
    {
      "action": "extractAll",
      "script": "fetch('https://vercel.com/api/teams?flags=false', {\n  headers: {\n    accept: '*/*',\n    'accept-language': 'en-US,en;q=0.9',\n  },\n  referrer: 'https://vercel.com/',\n  referrerPolicy: 'origin-when-cross-origin',\n  body: null,\n  method: 'GET',\n  mode: 'cors',\n  credentials: 'include',\n})\n  .then((r) => r.json())\n  .then((r) =>\n    r.teams.map((t) => ({\n      label: t.name,\n      value: t.id,\n    })),\n  )",
      "variable": "option",
      "forEach": [
        {
          "action": "exposeOption",
          "config": "teamId",
          "option": "{{option}}"
        }
      ]
    }
  ],
  "getDocuments": [
    {
      "action": "navigate",
      "description": "",
      "url": "https://vercel.com/home"
    },
    {
      "action": "extractAll",
      "variable": "invoice",
      "script": "fetch(\"https://vercel.com/api/stripe/invoices/previous?limit=25&teamId={{config.teamId}}\").then(res => res.json()).then(d => d.invoices.map(i => ({ id: i.number, date: new Date(i.created * 1000), amount: i.amount_due/100, invoicePdf: i.invoice_pdf, currency: i.currency })))",
      "forEach": [
        {
          "action": "downloadPdf",
          "description": "Download PDF from Stripe",
          "url": "{{invoice.invoicePdf}}",
          "document": {
            "id": "{{invoice.id}}",
            "date": "{{invoice.date}}",
            "total": "{{invoice.amount}} {{invoice.currency}}"
          }
        }
      ]
    }
  ]
}
